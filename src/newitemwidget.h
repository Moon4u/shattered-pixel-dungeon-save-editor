
#ifndef NEWITEMWIDGET_H
#define NEWITEMWIDGET_H

////////////////////////////////////////////////////////////////////////////////

/**
 * \class NewItemWidget
 * \brief A widget that simplifies the process of adding new item.
 *
 * This class allows the user to choose from variaty of items to add. The item
 * types are: Armor, Artifact, Bag, Potion, Ring Scroll, Wand, and Weapon.
 * Each type has a variaty of different items to choose from.
 * The user can also choose enchantment, glyph or curse for the item (if it is
 * possible).
 *
 * \var NewItemWidget::m_ui
 * Pointer to the user interface class, generated by the Qt Frameowrk.
 *
 * \var NewItemWidget::m_itemClass
 * A map containing the names of all item types, as required by the save file.
 *
 * \var NewItemWidget::m_itemTypes
 * A map containing the names of all items.
 *
 * \var NewItemWidget::m_items
 * A map containing the base path to an item, as requried by the save file.
 *
 * \var NewItemWidget::m_weaponCurses
 * A map containing all weapon curses, as requried by the save file.
 *
 * \var NewItemWidget::m_weaponEnchantments
 * A map containing all weapon enchantments, as requried by the save file.
 *
 * \var NewItemWidget::m_armorCurses;
 * A map containing all armor curses, as requried by the save file.
 *
 * \var NewItemWidget::m_armorGlyphs;
 * A map containing all armor glyphs, as requried by the save file.
 */

////////////////////////////////////////////////////////////////////////////////

#include <QMap>
#include <QWidget>

////////////////////////////////////////////////////////////////////////////////

namespace Ui {
	class NewItemWidget;
}

class	QJsonTreeItem;

////////////////////////////////////////////////////////////////////////////////

class NewItemWidget : public QWidget
{
	Q_OBJECT

public:
	enum	ITEM_TYPES {
		ARMOR	= 0,
		ARTIFACT,
		BAG,
		POTION,
		RING,
		SCROLL,
		WAND,
		WEAPON
	};

private:	
	enum	ARMOR_TYPES {
		A_CLOTH = 0,
		A_LEATHER,
		A_MAIL,
		A_SCALE,
		A_PLATE
	};

	enum	ARTIFACT_TYPES {
		AR_ALCHEMIST_TOOLKIT = 0,
		AR_CAPE_OF_THORNS,
		AR_CHALICE_OF_BLOOD,
		AR_CLOACK_OF_SHADOWS,
		AR_DRIED_ROSE,
		AR_ETHEREAL_CHAINS,
		AR_HORN_OF_PLENTY,
		AR_LLOYDS_BEACON,
		AR_MASTER_THIEVES_ARMBAND,
		AR_SANDALS_OF_NATURE,
		AR_TALISMAN_OF_FORESIGHT,
		AR_TIMEKEEPERS_HOURGLASS,
		AR_UNSTABLE_SPELLBOOK
	};

	enum	BAG_TYPES {
		B_MAGICAL_HOLSTER = 0,
		B_POTION_BANDOLIER,
		B_SCROLL_HOLSTER,
		B_VELVET_POUCH
	};

	enum	POTION_TYPES {
		// regular potions
		P_EXPERIENCE = 0,
		P_FROST,
		P_HASTE,
		P_HEALING,
		P_INVISIBILITY,
		P_LEVITATION,
		P_LIQUID_FLAME,
		P_MIND_VISION,
		P_PARALYTIC_GAS,
		P_PURITY,
		P_STRENGTH,
		P_TOXIC_GAS,

		// brews
		P_BLIZZARD,
		P_CAUSTIC,
		P_FRIGID,
		P_FROSTFIRE,
		P_INFERNAL,
		P_SHOCKING,
		P_WICKED,

		// elixirs
		P_AQUATIC_REJUVENATION,
		P_DRAGONS_BLOOD,
		P_HONEYED_HEALING,
		P_ICY_TOUCH,
		P_MIGHT,
		P_RESTORATION,
		P_TOXIC_ESSENSE,
		P_VITALITY,

		// exotic
		P_ADRENALINE_SURGE,
		P_CLEANSING,
		P_CORROSIVE_GAS,
		P_DRAGONS_BREATH,
		P_EARTHEN_ARMOR,
		P_HOLY_FUROR,
		P_MAGICAL_SIGHT,
		P_SHIELDING,
		P_SHROUDING_FOG,
		P_SNAP_FREEZE,
		P_STAMINA,
		P_STORM_CLOUDS
	};

	enum	RINGS {
		R_ACCURACY = 0,
		R_ELEMENTS,
		R_ENERGY,
		R_FORCE,
		R_FUROR,
		R_HASTE,
		R_MIGHT,
		R_SHARPSHOOTING,
		R_TENACITY,
		R_WEALTH
	};

	enum	SCROLLS {
		// regular
		S_IDENTIFY = 0,
		S_LULLABY,
		S_MAGIC_MAPPING,
		S_MIRROR_IMAGE,
		S_RAGE,
		S_RECHARGING,
		S_REMOVE_CURSE,
		S_RETRIBUTION,
		S_TELEPORTATION,
		S_TERROR,
		S_TRANSMUTATION,
		S_UPGRADE
	};

	enum	WANDS {
		WA_BLAST_WAVE = 0,
		WA_CORROSION,
		WA_CORRUPTION,
		WA_DISINTEGRATION,
		WA_FIREBLAST,
		WA_FROST,
		WA_LIGHTNING,
		WA_MAGIC_MISSILE,
		WA_PRISMATIC_LIGHT,
		WA_REGROWTH,
		WA_TRANSMUTATION
	};

	enum WEAPONS {
		W_ASSASINS_BLADE = 0,
		W_BATTLE_AXE,
		W_CROSSBOW,
		W_DAGGER,
		W_DIRK,
		W_FLAIL,
		W_GAUNTLET,
		W_GLAIVE,
		W_GLOVES,
		W_GREATAXE,
		W_GREATSHIELD,
		W_GREATSWORD,
		W_HAND_AXE,
		W_LONGSWORD,
		W_MACE,
		W_QUARTERSTAFF,
		W_ROUND_SHIELD,
		W_RUNIC_BLADE,
		W_SAI,
		W_SCIMITAR,
		W_SHORTSWORD,
		W_SPEAR,
		W_SWORD,
		W_WAR_HAMMER,
		W_WHIP,
		W_WORN_SHORTSWORD
	};

	enum	WEAPON_CURSES
	{
		WC_NONE = 0,
		WC_ANNOYING,
		WC_DISPLACING,
		WC_EXHAUSTING,
		WC_FRAGILE,
		WC_FRIENDLY,
		WC_POLARIZED,
		WC_SACRIFICIAL,
		WC_WAYWARD
	};

	enum	WEAPON_ENCHANTMENTS
	{
		WE_NONE = 0,
		WE_BLAZING,
		WE_BLOCKING,
		WE_BLOOMING,
		WE_CHILLING,
		WE_ELASTIC,
		WE_GRIM,
		WE_LUCKY,
		WE_PRECISE,
		WE_PROJECTING,
		WE_SHOCKING,
		WE_SWIFT,
		WE_UNSTABLE,
		WE_VAMPIRIC
	};

	enum	ARMOR_CURSES
	{
		AC_NONE	=0,
		AC_ANTI_ENTROPY,
		AC_BULK,
		AC_CORROSION,
		AC_DISPLACEMENT,
		AC_METABOLISM,
		AC_MULTIPLICITY,
		AC_OVERGROWTH,
		AC_STENCH
	};

	enum	ARMOR_GLYPHS
	{
		AE_NONE = 0,
		AE_AFFECTION,
		AE_ANTI_MAGIC,
		AE_BRIMSTONE,
		AE_CAMOUFLAGE,
		AE_ENTANGLEMENT,
		AE_FLOW,
		AE_OBFUSCATION,
		AE_POTENTIAL,
		AE_REPULSION,
		AE_STONE,
		AE_SWIFTNESS,
		AE_THORNS,
		AE_VISCOSITY
	};

public:
	explicit	NewItemWidget( QWidget* parent = nullptr );
	virtual		~NewItemWidget();

signals:
	void	addItem( QJsonTreeItem* item, int type );

private:
	void	setupItemComboBox();
	void	setupTypeComboBox();
	void	setupCurseAndEnchantmentComboBox();

	QJsonTreeItem*	createJsonItem( const QString& itemClass, int type, int itemLevel, int quantity, const QString& enchantment, const QString& curse );

private slots:
	void	onItemComboBoxIndexChanged( int index );
	void	onDoneBtnClicked( bool clicked );
	void	onCancelBtnClicked( bool clicked );

private:
	Ui::NewItemWidget*					m_ui;
	QMap< int, QString >				m_itemClass;
	QMap< int, QString >				m_itemTypes;
	QMap< int, QMap< int, QString > >	m_items;

	QMap< int, QString >	m_weaponCurses;
	QMap< int, QString >	m_weaponEnchantments;
	QMap< int, QString >	m_armorCurses;
	QMap< int, QString >	m_armorGlyphs;
};
////////////////////////////////////////////////////////////////////////////////

#endif // NEWITEMWIDGET_H
